moi = 192
lui - 62

Faire un read bloquant qui attends un message pour continuer le programme

192 -> 62 = handshake 136
62 -> 192 = handshake 141
192 -> 62 = bitfield, len:0x1 74 // parfois inverse, peer envoie le bitfield en premier
62 -> 192 = Bitfield, len:0x1 69 // 
192 -> 62 = Interested 73
62 -> 192 = unchoke 73
192 -> 62 = Request, Piece 153 (il demande 4 pieces minimum) 153
62 -> 192 = Piece, 1516 (il lui envoie une seule piece)
192 -> 62 = Have, Piece (Idx: 0x0)

Ensuite 62 lui envoie les pieces demandees auparavant


handshake OK

bitfield en x2
bitfield[8]
bitfield[0] = htonl(9)
bitfield[4] = id
send 9

payload[4]
[0] = htonl(0)
send 4


calculer le nombre de block / pieces pour dl le torrent :
LE JOUEUR D'ECHEC :
piece length = 16384 (classique) length = 66664
ici 66664 / 16383 = 4
int number of pieces = 4
int last_piece_length = 66664 - (16383 * number_of_pieces) = 1132

-1/Regarder dans le bitfield si le peer possede toutes les pieces (ici oui car f8 = 11111000)
sois les 4 pieces + la derniere

1/ separer les pieces en 16384
2/ telecharger les block pour construire une piece
3/ stocker le tout et l'assembler
4/ une fois toutes les pieces telechargees on les assemble en 1 fichier


Il faut read de 16383 + tout + recuperer le "payload" [3]

piece : <len=0009+X><id=7><index><begin><block>
             4        1      4      4

block = [13]

les \x0 bloquent la copie
copier tous les 4 char dans un uint32_t et remplir le fichier avec

FONCTIONNE DONC :

pour un fichier de 66664 octets, on decoupe en 4*1 + 1 avec
1/ buffer[16384 + 12] -> read de 16384 + 12 -> for (int i = 13; i != 16384+12; ++i)
2/ buffer[16384 + 12] -> read de 16384 + 12 -> for (int i = 13; i != 16384+12; ++i)
3/ buffer[16384 + 12] -> read de 16384 + 12 -> for (int i = 13; i != 16384+12; ++i)
4/ buffer[16384 + 12] -> read de 16384 + 12 -> for (int i = 13; i != 16384+12; ++i)
5/ buffer[1128 + 12] -> read de 1129 + 12 -> for (int i = 13; i != 1129+12; ++i)


Maintenant :

- Regarder le generateur de peer, qui semble ne pas donner les bonnes adresses ip
- avec ses peers regarder leur bitfield pour voir si 1 peer possede toutes les pieces

- faire le calcul pour les pieces et les block au cas ou le fichier et assez gros

- ajouter la possibilite de mettre en pause et de relancer

- ajouter la possibilite de partager un fichier torrent (have + pieces)


Fonctionnement du torrent :
Classes :
- Bytes manipulator : gestion du bencode du .torrent
- Networking : envoie les requetes tcp pour dialoguer avec le tracker / peers
- PeerManager : va determiner a quels peer on doit demander quels pieces
- PiecesManager : va determiner le nombre de pieces et de blocks qu'il va falloir dl
- TorrentManager : gere les informations du .torrent

1/ On fait tout pour recuperer les informations depuis le .torrent pour request le tracker.
2/ On fait la requete pour le tracker et qu'il nous renvoie la liste des peers. <TorrentMan>
3/ On fait les premieres requetes pour voir si il y a un peer qui possede toutes les pieces
apres avoir checke le nombre de peers (si il y a trop de peers ca va etre trop long)
<peermanager>/<torrentmanager>
4/Une fois qu'on trouve un peer correct, on lance le telechargement <piecesmanager>
<networking>
5/ On donne les informations qu'il faut et on stocke/creer les informations et le fichier
avec les calculs des pieces <piecesmanager><networking>
6/ Fin


void		Network::SendHandshake(int &sock) {}
+2 read : 1 pour le handshake et 1 pour le bitfield

stocker le socket du tracker et une fois toutes les ip des peers, stocker chaque ip:port
des peers jusqu'a trouver le peer qui possede tout
